<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>离散数学1</title>
    <link href="/2022/03/28/21-00-26/"/>
    <url>/2022/03/28/21-00-26/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>线性表学习笔记</title>
    <link href="/2022/03/27/23-00-00/"/>
    <url>/2022/03/27/23-00-00/</url>
    
    <content type="html"><![CDATA[<h1 id="线性表">线性表</h1><ul><li>数据对象： <span class="math inline">\(D\)</span> = {<spanclass="math inline">\(a_i|a_i\in ElemSet,i=1,2\cdots ,n,n\ge0\)</span>}</li><li>数据关系： <span class="math inline">\(R_1\)</span>={<spanclass="math inline">\(&lt;a_i,a_{i-1}&gt;\)</span>|<spanclass="math inline">\(a_i,a_{i-1}\in D,i=1,2,\cdots n\)</span>}</li><li>基本操作：<ul><li>InitLise(&amp;L)</li><li>ListLenth(L)</li><li>GetElem(L,i,&amp;e)</li><li>PriorElem(L,ce,&amp;pre_e)</li><li>ListInsert(&amp;L,i,e)</li><li>ListDelete(&amp;L,i,&amp;e)</li><li>LocateElem(L,e,compare())</li></ul></li></ul><h2 id="线性表的顺序存储结构">线性表的顺序存储结构</h2><p>顺序分配：将数据元素<strong>依次</strong>存放到计算机存储器中一组<strong>地址连续</strong>的单元中。</p><ul><li><p>静态一维数组的定义 <div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">maxlen</span> <span class="token expression"><span class="token number">100</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    ElemType elem<span class="token punctuation">[</span>maxlen<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> length<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>SqList<span class="token punctuation">;</span>SqList La<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></p></li><li><p>动态一维数组的定义</p></li></ul><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LIST_INIT_SIZE</span> <span class="token expression"><span class="token number">100</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LISTINCREMENT</span> <span class="token expression"><span class="token number">10</span></span></span>type <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    ElemType <span class="token operator">*</span>elem<span class="token punctuation">;</span><span class="token comment">//存储空间基地址</span>    <span class="token keyword">int</span> length<span class="token punctuation">;</span>    <span class="token comment">//存储表长</span>    <span class="token keyword">int</span> listsize<span class="token punctuation">;</span>  <span class="token comment">//当前分配的存储容量，以sizeof(ElemType)为单位</span><span class="token punctuation">&#125;</span>SqList<span class="token punctuation">;</span>SqList Lb<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><ul><li><p>初始化 时间复杂度<span class="math inline">\(O(1)\)</span>空间复杂度<span class="math inline">\(O(1)\)</span><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c">Status <span class="token function">InitList_Sq</span><span class="token punctuation">(</span>SqList <span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    L<span class="token punctuation">.</span>elem <span class="token operator">=</span> <span class="token punctuation">(</span>ElemType<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>LIST_INIT_SIZE<span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>ElemType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//利用malloc函数分配L的存储空间 返回首地址给L.elem</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">)</span> <span class="token function">exit</span><span class="token punctuation">(</span>OVERFLOW<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//L.elem为NULL 存储分配失败</span>    L<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    L<span class="token punctuation">.</span>listsize <span class="token operator">=</span> LIST_INIT_SIZE<span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></p></li><li><p>插入算法（静态分配）这里是是用指针指向线性表操作，也可以使用引用参数&amp;L来表示线性表，用L.elem操作。<div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">Insert</span><span class="token punctuation">(</span>SqList <span class="token operator">*</span>L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>ElemType e<span class="token punctuation">)</span><span class="token comment">//在第i个元素前插入e</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">1</span> <span class="token operator">||</span> i<span class="token operator">></span>L<span class="token operator">-></span>length<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token operator">-></span>length<span class="token operator">>=</span>maxlen<span class="token punctuation">)</span> <span class="token keyword">return</span> OVERFLOW<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> L<span class="token operator">-></span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">>=</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>        L<span class="token operator">-></span>elem<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token operator">-></span>elem<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//向后移动元素</span>    L<span class="token operator">-></span>elem<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>    L<span class="token operator">-></span>length<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></p></li><li><p>插入算法（动态分配） 移动元素个数的平均值是<spanclass="math inline">\(\frac{n}{2}\)</span> <div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">ListInsert_Sq</span><span class="token punctuation">(</span>SqList <span class="token operator">&amp;</span>L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>ElemType e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">1</span> <span class="token operator">|</span> i<span class="token operator">></span>L<span class="token punctuation">.</span>length<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token operator">-></span>length <span class="token operator">>=</span> L<span class="token punctuation">.</span>listsize<span class="token punctuation">)</span><span class="token comment">//动态分配 可以进行扩容</span>    <span class="token punctuation">&#123;</span>        ElemType <span class="token operator">*</span>newbase<span class="token punctuation">;</span>        newbase <span class="token operator">=</span> <span class="token punctuation">(</span>ElemType<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">realloc</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">,</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>listsize<span class="token operator">+</span>LISTINCREMENT<span class="token punctuation">)</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>ElemType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//重新分配空间使用realloc函数，将L.elem原空间数据全部复制到新分配的存储中,注意是ElemType类型不是SqList类型</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>newbase<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> OVERFLOW<span class="token punctuation">;</span>        L<span class="token punctuation">.</span>elem <span class="token operator">=</span> newbase<span class="token punctuation">;</span>        L<span class="token punctuation">.</span>listsize <span class="token operator">+=</span> LISTINCERMENT<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>L<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">>=</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>        L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>    L<span class="token punctuation">.</span>length<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></p></li><li><p>删除操作 移动元素个数平均值<spanclass="math inline">\(\frac{n-1}{2}\)</span>，时间复杂度<spanclass="math inline">\(O(n)\)</span> <div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c">Status <span class="token function">LitDelete_Sq</span><span class="token punctuation">(</span>SqList <span class="token operator">&amp;</span>L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>ElemType <span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">1</span> <span class="token operator">|</span> i<span class="token operator">></span>L<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>  p <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//被删除元素的位置p</span>  e <span class="token operator">=</span> <span class="token operator">*</span>p<span class="token punctuation">;</span> <span class="token comment">//被删除元素的值赋给e</span>  q <span class="token operator">=</span> L<span class="token punctuation">.</span>elem <span class="token operator">+</span> L<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">//表尾元素的位置</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token operator">++</span>p<span class="token punctuation">;</span> p<span class="token operator">&lt;=</span>q<span class="token punctuation">;</span> p<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>  <span class="token comment">//被删除元素后的元素左移</span>  <span class="token operator">--</span>L<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></p></li></ul><h2 id="线性表的链式存储结构">线性表的链式存储结构</h2><p>通过<strong>指针</strong>实现，结点在存储器中的位置是<strong>随意</strong>的，逻辑上相邻的数据元素在物理上不一定相邻。</p><h3 id="单链表">单链表</h3><p>分为<strong>带表头结点</strong>的单链表和<strong>不带表头节点</strong>的单链表。头指针指向链表第一个节点；头节点是在链表的首元结点之前附设的一个节点，数据域内只放表长和空表标志等信息，不计入表长；首元节点是链表中储存第一个数据<spanclass="math inline">\(a_1\)</span>的节点。</p><ul><li><p>单链表的定义也可以单纯使用结构类型定义，大同小异，只是指针变量的说明稍有变化。<div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Lnode</span><span class="token punctuation">&#123;</span>  ElemType data<span class="token punctuation">;</span>  <span class="token keyword">struct</span> <span class="token class-name">Lnode</span> <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token comment">//指针类型的next</span><span class="token punctuation">&#125;</span>Lnode<span class="token punctuation">,</span> <span class="token operator">*</span>Linklist<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>指针变量head,p,q的说明：<code>Linklist head, p ,q;</code></p></li><li><p>生成单链表（先进先出） <div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LENG</span> <span class="token expression"><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">node</span><span class="token punctuation">)</span></span><span class="token comment">//节点所占的字节数</span></span><span class="token keyword">struct</span> <span class="token class-name">Lnode</span> <span class="token operator">*</span><span class="token function">create1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">struct</span> <span class="token class-name">Lnode</span> <span class="token operator">*</span>head<span class="token punctuation">,</span> <span class="token operator">*</span>tail<span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>  <span class="token keyword">int</span> e<span class="token punctuation">;</span>  head <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Lnode</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>LENG<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//生成表头节点</span>  tail <span class="token operator">=</span> head<span class="token punctuation">;</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Lnode</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>LENG<span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token operator">-></span>data <span class="token operator">=</span> e<span class="token punctuation">;</span>    tail<span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token punctuation">;</span><span class="token comment">//先进先出</span>    tail <span class="token operator">=</span> p<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  tail<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment">//表尾next置为空指针</span>  <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></p></li><li><p>生成单链表（后进先出） 基本同先进先出相同。<div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">Lnode</span> <span class="token operator">*</span><span class="token function">create2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">struct</span> <span class="token class-name">Lnode</span> <span class="token operator">*</span>head<span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>  <span class="token keyword">int</span> e<span class="token punctuation">;</span>  head <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Lnode</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>LENG<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//生成表头节点</span>  head<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment">//置为空表</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Lnode</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>LENG<span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token operator">-></span>data <span class="token operator">=</span> e<span class="token punctuation">;</span>    p<span class="token operator">-></span>next <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span><span class="token comment">//新节点指针指向首元素</span>    head<span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token punctuation">;</span><span class="token comment">//新节点作为首元素</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></p></li><li><p>单链表的修改和存取</p></li><li><p>单链表的节点插入</p></li><li><p>单链表的节点删除</p></li><li><p>两个有序单链表的归并</p></li></ul><h3 id="静态链表">静态链表</h3><h3 id="循环链表">循环链表</h3><h3 id="双向链表">双向链表</h3><ul><li>双向链表的定义 <div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">DuLNode</span><span class="token punctuation">&#123;</span>   ElemType data<span class="token punctuation">;</span>  <span class="token keyword">struct</span> <span class="token class-name">DuLNode</span> <span class="token operator">*</span>prior<span class="token punctuation">;</span><span class="token comment">//前驱指针</span>  <span class="token keyword">struct</span> <span class="token class-name">DuLNode</span> <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token comment">//后继指针</span><span class="token punctuation">&#125;</span>DuLNode<span class="token punctuation">,</span> <span class="token operator">*</span>DuLinkList<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div> ## 经典问题</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的第一次尝试</title>
    <link href="/2022/03/27/12-18-04/"/>
    <url>/2022/03/27/12-18-04/</url>
    
    <content type="html"><![CDATA[<h1 id="hello-world">hello world</h1><h2 id="hello-world-1">hello world</h2><h3 id="hello-world-2">hello world</h3><p>hello world <strong>hello world</strong> <em>hello world</em><del>hello world</del> ==hello world==</p><ul><li>first<ul><li>1.1<ul><li>1.2</li></ul></li></ul></li><li>second</li></ul><ol type="1"><li>好神奇<ol type="1"><li>太神奇了</li><li>我是说<em>真的</em>很<strong>神奇</strong></li></ol></li></ol><blockquote><p>鲁迅曾说</p></blockquote><p><code>printf("hello world")</code>这样可以继续在一行内打字</p><div class="code-wrapper"><pre class="line-numbers language-c&#123;.line-numbers&#125;<!--这个可以显示行数-->" data-language="c&#123;.line-numbers&#125;<!--这个可以显示行数-->"><code class="language-c&#123;.line-numbers&#125;<!--这个可以显示行数-->">printf(&quot;hello world&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p><a href="https://theme-next.js.org/docs/">传送！</a> <imgsrc="/img/posts/avatar.jpg" alt="一张图" /></p><p>如果在这里我写了一段话 如果我不换行 那么我要换一行</p><hr /><p>就是这样！</p><figure><img src="/img/posts/2022-03-27-12-43-38.jpg"alt="这是我粘贴来的图片！" /><figcaption aria-hidden="true">这是我粘贴来的图片！</figcaption></figure><p>下面是一些数学公式的尝试 <spanclass="math inline">\(x^2+y^2=1\)</span> 公式块:</p><p><span class="math display">\[\begin{cases}x=\rho\cos\theta \\y=\rho\sin\theta \\\end{cases}\]</span></p><p><span class="math display">\[x^3+y^3=\theta\]</span>两个好像可以居中<span class="math display">\[\mathbb{R}\]</span> <spanclass="math display">\[\frac{1}{2}\]</span> <spanclass="math display">\[\sqrt{1}\]</span></p>]]></content>
    
    
    
    <tags>
      
      <tag>markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
