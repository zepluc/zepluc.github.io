<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>图的单源最短路径算法</title>
    <link href="/2022/04/15/22-46-34/"/>
    <url>/2022/04/15/22-46-34/</url>
    
    <content type="html"><![CDATA[<h1 id="dijkstra算法">1.dijkstra算法</h1><h2 id="算法说明">算法说明</h2><p>可以理解为一种贪心+动态规划，主要解决带权重的有向图上单源最短路径问题，要求所有边的权重为非负值。</p><p>首先将图上的结点分为两个集合，一个集合<spanclass="math inline">\(S\)</span>包含已经处理完毕的结点，另一个集合<spanclass="math inline">\(T\)</span>包含待处理的结点。初始状态下，集合<spanclass="math inline">\(S\)</span>内只有起始结点；在邻接矩阵内不相邻的两个点距离置为<spanclass="math inline">\(INF\)</span>，<spanclass="math inline">\(dis[]\)</span>置为<spanclass="math inline">\(INF\)</span>。</p><p>每一次遍历处理一个结点，因此共需要(n-1)次遍历。在每一次遍历中，寻找距离起始结点距离最近的结点，加入<spanclass="math inline">\(S\)</span>，踢出<spanclass="math inline">\(T\)</span>。然后再根据这个结点的<spanclass="math inline">\(dis\)</span>，遍历其余结点，更新它们到起始结点的距离。</p><p><img src="/img/posts/dijkstra_1.jpg" /></p><p><ahref="https://blog.csdn.net/heroacool/article/details/51014824">以上图解来自此blog</a></p><h2 id="代码">代码</h2><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX</span> <span class="token expression"><span class="token number">100</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INF</span> <span class="token expression"><span class="token number">100000</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_graph</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> vexnum<span class="token punctuation">;</span> <span class="token comment">//顶点数</span>    <span class="token keyword">int</span> edgnum<span class="token punctuation">;</span> <span class="token comment">//边数</span>    <span class="token keyword">int</span> matrix<span class="token punctuation">[</span>MAX<span class="token punctuation">]</span><span class="token punctuation">[</span>MAX<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//邻接矩阵</span><span class="token punctuation">&#125;</span>Graph<span class="token punctuation">,</span> <span class="token operator">*</span>PGragh<span class="token punctuation">;</span>Graph G<span class="token punctuation">;</span><span class="token keyword">int</span> dis<span class="token punctuation">[</span>MAX<span class="token punctuation">]</span><span class="token punctuation">,</span>vis<span class="token punctuation">[</span>MAX<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//两个集合</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">/*初始化*/</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入结点个数和边的数目:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>G<span class="token punctuation">.</span>vexnum<span class="token punctuation">,</span> <span class="token operator">&amp;</span>G<span class="token punctuation">.</span>edgnum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>G<span class="token punctuation">.</span>vexnum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> INF<span class="token punctuation">;</span>    <span class="token keyword">int</span> start<span class="token punctuation">,</span> end<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入边的起点、边的终点与边的权值:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>G<span class="token punctuation">.</span>edgnum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>start<span class="token punctuation">,</span><span class="token operator">&amp;</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>G<span class="token punctuation">.</span>matrix<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        G<span class="token punctuation">.</span>matrix<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> G<span class="token punctuation">.</span>matrix<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入想要寻找最短路径的起点：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/*dijkstra*/</span>    dis<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    vis<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>G<span class="token punctuation">.</span>vexnum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//dis数组初始化</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>G<span class="token punctuation">.</span>matrix<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>            dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> G<span class="token punctuation">.</span>matrix<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>G<span class="token punctuation">.</span>vexnum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//循环G.vexnum - 1次</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> min <span class="token operator">=</span> INF<span class="token punctuation">;</span>        <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>G<span class="token punctuation">.</span>vexnum<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> dis<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;</span>min<span class="token punctuation">)</span><span class="token comment">//遍历找dis最近的结点</span>            <span class="token punctuation">&#123;</span>                min <span class="token operator">=</span> dis<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                k <span class="token operator">=</span> j<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        vis<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//将k结点加入已处理集合</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>G<span class="token punctuation">.</span>vexnum<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//更新其它结点的dis</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>G<span class="token punctuation">.</span>matrix<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> dis<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>dis<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+</span>G<span class="token punctuation">.</span>matrix<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>vis<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                dis<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dis<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+</span>G<span class="token punctuation">.</span>matrix<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/*输出*/</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"结点%d到各个结点的最短距离分别为:\n"</span><span class="token punctuation">,</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>G<span class="token punctuation">.</span>vexnum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"dis[%d] = %d\n"</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="证明及分析">证明及分析</h2><p>使用<strong>数学归纳法</strong>，证明dijkstra算法产生无向联通加权图中两个顶点<spanclass="math inline">\(a\)</span>与<spanclass="math inline">\(z\)</span>之间最短通路的长度。</p><p>归纳假设：</p><p>  （1）集合<spanclass="math inline">\(S\)</span>内的顶点v对应的dis[v]是从a到v的最短通路长度。</p><p>  （2）集合<spanclass="math inline">\(T\)</span>中的顶点u对应的dis[u]应当是仅仅包含<spanclass="math inline">\(S\)</span>中顶点的从a到u的最短通路的长度。</p><p>当k=0时，基础步骤显然成立。</p><p>假设对于第<spanclass="math inline">\(k\)</span>次迭代，归纳假设成立。设<spanclass="math inline">\(v\)</span>是第<spanclass="math inline">\(k+1\)</span>次迭代时添加到<spanclass="math inline">\(S\)</span>中的顶点，这说明<spanclass="math inline">\(v\)</span>是第<spanclass="math inline">\(k\)</span>次迭代结束后<spanclass="math inline">\(dis\)</span>最小的集合T中的顶点。</p><p>根据归纳假设，在第<spanclass="math inline">\(k+1\)</span>次迭代之前，集合<spanclass="math inline">\(S\)</span>中的顶点的<spanclass="math inline">\(dis\)</span>都对应着从<spanclass="math inline">\(a\)</span>到这个顶点的最短通路长度。<spanclass="math inline">\(dis[v]\)</span>也一定是从a到v的最短路径长度。假如情况不是这样，那么第<spanclass="math inline">\(k\)</span>次迭代结束后，可能存在包含集合<spanclass="math inline">\(T\)</span>中顶点的路径长度小于<spanclass="math inline">\(dis[v]\)</span>。不妨假设这个集合T中的第一个顶点是<spanclass="math inline">\(u\)</span>，那么一定存在仅包含<spanclass="math inline">\(S\)</span>中顶点的从<spanclass="math inline">\(a\)</span>到<spanclass="math inline">\(u\)</span>的路径长度<spanclass="math inline">\(dis[u]&lt;dis[v]\)</span>，与<spanclass="math inline">\(v\)</span>的选择相矛盾，因此在第<spanclass="math inline">\(k+1\)</span>次迭代时（1）成立。</p><p>设<span class="math inline">\(u\)</span>是第<spanclass="math inline">\(k+1\)</span>次迭代后不属于<spanclass="math inline">\(S\)</span>的一个顶点。只包含<spanclass="math inline">\(S\)</span>中顶点的从a到<spanclass="math inline">\(u\)</span>的最短通路要么包含<spanclass="math inline">\(v\)</span>，要么不包含<spanclass="math inline">\(v\)</span>。当这条最短通路不包含v的时候，路径长度就是<spanclass="math inline">\(dis[u]\)</span>；当这条最短通路包含v的时候，<spanclass="math inline">\(dis[u]\)</span>更新为<spanclass="math inline">\(dis[v]+matrix[v][u]\)</span>。这说明<spanclass="math inline">\(dis[u]\)</span> = min{<spanclass="math inline">\(dis[u]\)</span>,<spanclass="math inline">\(dis[v]+matrix[v][u]\)</span>}，也就是（2）成立。</p><p><strong>时间复杂度分析</strong></p><p>迭代次数不超过n-1次，其中n是图中顶点的个数。在每次迭代中，使用最多(n-1)次比较找到新进入集合S的顶点；找到顶点后，又需要使用一次加法和一次比较更新dis，不超过2(n-1)次运算，因此得到总的时间复杂度<spanclass="math inline">\(O(n^2)\)</span>。</p><h1 id="floyd算法">2.Floyd算法</h1><h1 id="bellman-ford算法">3.Bellman-Ford算法</h1>]]></content>
    
    
    
    <tags>
      
      <tag>离散数学</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kosaraju算法</title>
    <link href="/2022/04/13/19-13-41/"/>
    <url>/2022/04/13/19-13-41/</url>
    
    <content type="html"><![CDATA[<p>首先放出无向图的连通性判断代码。</p><p>基本思路是从任意一个顶点开始DFS，每次DFS标记所有包含这个结点的连通分量的所有结点，最终的连通分量个数就是DFS总次数。<div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX</span> <span class="token expression"><span class="token number">100</span></span></span><span class="token keyword">int</span> p<span class="token punctuation">[</span>MAX<span class="token punctuation">]</span><span class="token punctuation">[</span>MAX<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> vis<span class="token punctuation">[</span>MAX<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> v<span class="token punctuation">,</span> e<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">DFS</span><span class="token punctuation">(</span><span class="token keyword">int</span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> u<span class="token operator">&lt;</span>v<span class="token punctuation">;</span> u<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">&amp;</span> p<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            vis<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token function">DFS</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>vis<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>vis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入节点数和边的数目：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>v<span class="token punctuation">,</span><span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> s<span class="token punctuation">,</span> t<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入边：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>e<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        p<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>v<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">DFS</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            cnt<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>cnt<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"是连通图。\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"不是连通图，连通分量为%d。\n"</span><span class="token punctuation">,</span> cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></p><p>再思考如何解决有向图的强连通分量数目问题。显然不能够直接套用无向图的方法解决，因为这样有可能出现明明有多个强连通分量却因为遍历顺序随机而导致一次DFS就能够标记所有结点。</p><figure><img src="/img/posts/kosaraju_1.jpg" alt="反例" /><figcaption aria-hidden="true">反例</figcaption></figure><p>因为在上图中有两个强连通分量A和B，B是被A指向的分量。这就导致，当我们首先从A中结点开始遍历的时候出现了问题。为了解决这个问题，我们需要让被指向的强连通分量优先被搜索到，即B中至少一个顶点排在A中所有顶点的前面进行DFS。</p><p>那么如何得到这个特定的顺序呢？这就需要对原图G进行一遍DFS操作，找到图中结点的逆后序。<img src="/img/posts/kosaraju_2.png" alt="图解" /></p><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*   * 如果当前顶点未访问，先遍历完与当前顶点相连的且未被访问的所有其它顶点， * 然后将当前顶点加入栈中，最后栈中从栈顶到栈底的顺序就是我们需要的顶点顺序。 * 实际上这个逆后序就是第一次DFS后各节点的finishing time的降序排列。 */</span><span class="token keyword">void</span> <span class="token function">dfs_1</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    vis<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>v<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> map<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token function">dfs_1</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>有了这个逆后序，我们只需要再在原图G的转置上进行和无向图一样的DFS操作就可以得到有向图的强连通分量啦。(转置图的强连通分量和原图是完全一样的)</p><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stack></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX</span> <span class="token expression"><span class="token number">100</span></span></span><span class="token keyword">int</span> v<span class="token punctuation">,</span>e<span class="token punctuation">;</span><span class="token keyword">int</span> map<span class="token punctuation">[</span>MAX<span class="token punctuation">]</span><span class="token punctuation">[</span>MAX<span class="token punctuation">]</span><span class="token punctuation">,</span> nmap<span class="token punctuation">[</span>MAX<span class="token punctuation">]</span><span class="token punctuation">[</span>MAX<span class="token punctuation">]</span><span class="token punctuation">,</span> vis<span class="token punctuation">[</span>MAX<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//邻接矩阵 邻接矩阵的转置 标记</span>stack <span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> s<span class="token punctuation">;</span><span class="token comment">//栈 用于记录逆后序</span><span class="token keyword">void</span> <span class="token function">dfs_1</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span><span class="token comment">//用于求逆后序</span><span class="token punctuation">&#123;</span>    vis<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>v<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> map<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token function">dfs_1</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">dfs_2</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span><span class="token comment">//遍历 map的转置</span><span class="token punctuation">&#123;</span>    vis<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>v<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> nmap<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token function">dfs_2</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">kosaraju</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>vis<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>vis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>v<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token function">dfs_1</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//入栈</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>vis<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>vis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//遍历图内每一个点</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> u <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//每次取栈顶的顶点</span>        s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//int u = t[i++];</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//如果该顶点在之前没有被访问过</span>        <span class="token punctuation">&#123;</span>            ans<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//强连通分量++</span>            <span class="token function">dfs_2</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从该点开始DFS 标记和该顶点同属一个强连通分量的顶点</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token comment">//返回答案</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>nmap<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>nmap<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入节点数和边的数目：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>v<span class="token punctuation">,</span><span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> s<span class="token punctuation">,</span> t<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入边：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>e<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        nmap<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token function">kosaraju</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>cnt <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"是强连通图。\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"不是强连通图，强连通分量为%d。\n"</span><span class="token punctuation">,</span>cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>]]></content>
    
    
    
    <tags>
      
      <tag>离散数学</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数组和广义表</title>
    <link href="/2022/04/07/14-02-31/"/>
    <url>/2022/04/07/14-02-31/</url>
    
    <content type="html"><![CDATA[<h1 id="数组和广义表">数组和广义表</h1><p>一种推广的线性表，表中的数据元素也是一个线性表，所有基本数据元素仍属同一数据类型。</p><h2 id="数组">数组</h2><p>相同类型的数据的<strong>有限的、有序的</strong>组合。结构固定、类型统一。</p><h3 id="一维数组">一维数组</h3><p><strong>定长</strong>线性表。</p>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>字符串学习笔记</title>
    <link href="/2022/03/28/21-00-26/"/>
    <url>/2022/03/28/21-00-26/</url>
    
    <content type="html"><![CDATA[<h1 id="字符串">字符串</h1><p>##串的定长顺序存储</p>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>栈和队列学习笔记</title>
    <link href="/2022/03/28/21-00-26/"/>
    <url>/2022/03/28/21-00-26/</url>
    
    <content type="html"><![CDATA[<h1 id="栈和队列">栈和队列</h1><p>限定插入和删除只能在表的<strong>端点</strong>进行的线性表。</p><h2 id="栈">栈</h2><p>限定在<strong>表尾</strong>作插入、删除操作的线性表。后进先出。</p><ul><li><p>数据对象： <span class="math inline">\(D\)</span> = {<spanclass="math inline">\(a_i|a_i\in ElemSet,i=1,2\cdots ,n,n\ge0\)</span>}</p></li><li><p>数据关系： <span class="math inline">\(R_1\)</span>={<spanclass="math inline">\(&lt;a_i,a_{i-1}&gt;\)</span>|<spanclass="math inline">\(a_i,a_{i-1}\in D,i=1,2,\cdots n\)</span>}</p></li><li><p>基本操作</p><ul><li>Initstack(&amp;s);</li><li>Push(&amp;s,e);</li><li>Pop(&amp;s,&amp;e);</li><li>GetTop(s,&amp;e);</li><li>StackEmpty(s);</li></ul></li></ul><h3 id="顺序栈">顺序栈</h3><ul><li>定义</li></ul><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*静态分配*/</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    SElemType elem<span class="token punctuation">[</span>maxlen<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> top<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>SqStack<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*动态分配*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">STACK_INIT_SIZE</span> <span class="token expression"><span class="token number">100</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">STACKINCREMENT</span> <span class="token expression"><span class="token number">10</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    SElemType <span class="token operator">*</span>base<span class="token punctuation">;</span>    <span class="token comment">//指向栈空间基地址</span>    SElemType <span class="token operator">*</span>top<span class="token punctuation">;</span>     <span class="token comment">//指向栈顶元素的后一单元</span>    <span class="token keyword">int</span> stacksize<span class="token punctuation">;</span>      <span class="token comment">//已分配的存储空间大小</span><span class="token punctuation">&#125;</span>SqStack<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><ul><li>初始化栈（动态分配）</li></ul><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c">Status <span class="token function">InitStack</span><span class="token punctuation">(</span>SqStack <span class="token operator">&amp;</span>S<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    S<span class="token punctuation">.</span>base <span class="token operator">=</span> <span class="token punctuation">(</span>SElemType <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>STACK_INIT_SIZE<span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>SElemType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>S<span class="token punctuation">.</span>base<span class="token punctuation">)</span> <span class="token function">exit</span><span class="token punctuation">(</span>OVERFLOW<span class="token punctuation">)</span><span class="token punctuation">;</span>    S<span class="token punctuation">.</span>top <span class="token operator">=</span> S<span class="token punctuation">.</span>base<span class="token punctuation">;</span>    S<span class="token punctuation">.</span>size <span class="token operator">=</span> STACK_INIT_SIZE<span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><ul><li>取栈顶元素</li></ul><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c">Status <span class="token function">GetTop</span><span class="token punctuation">(</span>SqStack <span class="token operator">&amp;</span>S<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>S<span class="token punctuation">.</span>top<span class="token operator">==</span>S<span class="token punctuation">.</span>base<span class="token punctuation">)</span> <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span> <span class="token comment">//空栈</span>    e  <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>S<span class="token punctuation">.</span>top<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><ul><li>进栈</li></ul><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c">Status <span class="token function">Push</span><span class="token punctuation">(</span>SqStack <span class="token operator">&amp;</span>S<span class="token punctuation">,</span>SElemType e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>S<span class="token punctuation">.</span>top <span class="token operator">-</span> S<span class="token punctuation">.</span>base <span class="token operator">>=</span> S<span class="token punctuation">.</span>stacksize<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        SElemType<span class="token operator">*</span> newbase<span class="token punctuation">;</span>        newbase <span class="token operator">=</span> <span class="token punctuation">(</span>SElemType<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">realloc</span><span class="token punctuation">(</span>S<span class="token punctuation">.</span>base<span class="token punctuation">,</span> <span class="token punctuation">(</span>S<span class="token punctuation">.</span>stacksize<span class="token operator">+</span>STACKINCREMENT<span class="token punctuation">)</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>SElemType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>newbase<span class="token punctuation">)</span> <span class="token function">exit</span><span class="token punctuation">(</span>OVERFLOW<span class="token punctuation">)</span><span class="token punctuation">;</span>        S<span class="token punctuation">.</span>base <span class="token operator">=</span> newbase<span class="token punctuation">;</span>        S<span class="token punctuation">.</span>top <span class="token operator">=</span> S<span class="token punctuation">.</span>base <span class="token operator">+</span> S<span class="token punctuation">.</span>stacksize<span class="token punctuation">;</span>        S<span class="token punctuation">.</span>stacksize <span class="token operator">+=</span> STACKINCREMENT<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token operator">*</span>S<span class="token punctuation">.</span>top<span class="token operator">++</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><ul><li>出栈</li></ul><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c">Status <span class="token function">Pop</span><span class="token punctuation">(</span>SqStack <span class="token operator">&amp;</span>S<span class="token punctuation">,</span>SElemType <span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>S<span class="token punctuation">.</span>top<span class="token operator">==</span>S<span class="token punctuation">.</span>base<span class="token punctuation">)</span> <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    e <span class="token operator">=</span> <span class="token operator">*</span><span class="token operator">--</span>S<span class="token punctuation">.</span>top<span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="链式栈">链式栈</h3><p><strong>不带表头节点</strong>的单链表</p><ul><li>定义</li></ul><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">node</span><span class="token punctuation">&#123;</span>    SElemType data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">*</span>top <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>   <span class="token comment">//初始化 置top为空栈</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><ul><li>进栈</li></ul><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">node</span><span class="token operator">*</span> <span class="token function">push_link</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token operator">*</span>top<span class="token punctuation">,</span> SElemType e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">node</span> p<span class="token punctuation">;</span>    p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">node</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">nodes</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p <span class="token operator">-></span> data <span class="token operator">=</span> e<span class="token punctuation">;</span> <span class="token comment">//装入元素e</span>    p <span class="token operator">-></span> next <span class="token operator">=</span> top<span class="token punctuation">;</span> <span class="token comment">//入栈</span>    top <span class="token operator">=</span> p<span class="token punctuation">;</span> <span class="token comment">//变头节点</span>    <span class="token keyword">return</span> top<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><ul><li>出栈</li></ul><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">node</span><span class="token operator">*</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token operator">*</span>p<span class="token punctuation">,</span> SElemType <span class="token operator">*</span>e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>top<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment">//空栈 返回NULL</span>    p <span class="token operator">=</span> top<span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token operator">*</span>e<span class="token punctuation">)</span> <span class="token operator">=</span> p<span class="token operator">-></span>data<span class="token punctuation">;</span>    top <span class="token operator">=</span> top<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> top<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="应用举例待补充">应用举例（待补充）</h3><ul><li>数制转换</li><li>表达式中的括号匹配</li><li>表达式求值</li></ul><h2 id="队列">队列</h2><p>限定在<strong>表头</strong>删除，在<strong>表尾</strong>插入的线性表。先进先出。</p><ul><li><p>数据对象： <span class="math inline">\(D\)</span> = {<spanclass="math inline">\(a_i|a_i\in ElemSet,i=1,2\cdots ,n,n\ge0\)</span>}</p></li><li><p>数据关系： <span class="math inline">\(R_1\)</span>={<spanclass="math inline">\(&lt;a_i,a_{i-1}&gt;\)</span>|<spanclass="math inline">\(a_i,a_{i-1}\in D,i=1,2,\cdots n\)</span>}</p></li><li><p>基本操作</p><ul><li>InitQueue(&amp;Q)</li><li>DestroyQueue(&amp;Q)</li><li>QueueEmpty(Q)</li><li>QueueLength(Q)</li><li>GetHead(Q,&amp;e)</li><li>EnQueue(&amp;Q,e)</li><li>DeQueue(&amp;Q,&amp;e)</li><li>ClearQueue(&amp;Q)</li><li>QueueTraverse(Q,visit())</li></ul></li></ul><h3 id="链式队列">链式队列</h3><p><strong>带表头节点</strong>的单链表,当Q.front==Q.rear时为空表。</p><ul><li>定义</li></ul><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*存放元素的结点类型*/</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Qnode</span><span class="token punctuation">&#123;</span>    QElemType data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">Qnode</span> <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Qnode<span class="token punctuation">,</span><span class="token operator">*</span>QueuePtr<span class="token punctuation">;</span><span class="token comment">//节点类型和指针类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*由头、尾指针组成的队列类型*/</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    Qnode <span class="token operator">*</span>front<span class="token punctuation">;</span>    Qnode <span class="token operator">*</span>rear<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>LinkQueue<span class="token punctuation">;</span><span class="token comment">//链式队列类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><ul><li>生成空队列</li></ul><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c">Status <span class="token function">InitQueue</span><span class="token punctuation">(</span>LinkQueue <span class="token operator">&amp;</span>Q<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Q<span class="token punctuation">.</span>front <span class="token operator">=</span> Q<span class="token punctuation">.</span>rear <span class="token operator">=</span> <span class="token punctuation">(</span>QueuePtr<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Qnode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>Q<span class="token punctuation">.</span>front<span class="token punctuation">)</span> <span class="token function">exit</span><span class="token punctuation">(</span>OVERFLOW<span class="token punctuation">)</span><span class="token punctuation">;</span>    Q<span class="token punctuation">.</span>front <span class="token operator">-></span> next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><ul><li>入队</li></ul><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c">Status <span class="token function">EnQueue</span><span class="token punctuation">(</span>LinkQueue <span class="token operator">&amp;</span>Q<span class="token punctuation">,</span> QElemType e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    p <span class="token operator">=</span> <span class="token punctuation">(</span>QueuePtr<span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Qnode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token punctuation">)</span> <span class="token function">exit</span><span class="token punctuation">(</span>OVERFLOW<span class="token punctuation">)</span><span class="token punctuation">;</span>    p <span class="token operator">-></span> data <span class="token operator">=</span> e<span class="token punctuation">;</span>    p <span class="token operator">-></span> next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    Q<span class="token punctuation">.</span>rear <span class="token operator">-></span> next <span class="token operator">=</span> p<span class="token punctuation">;</span>    Q<span class="token punctuation">.</span>rear <span class="token operator">=</span> p<span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><ul><li>出队</li></ul><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c">Status <span class="token function">DeQueue</span><span class="token punctuation">(</span>LinkQueue <span class="token operator">&amp;</span>Q<span class="token punctuation">,</span> QElemType <span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Q<span class="token punctuation">.</span>front <span class="token operator">==</span> Q<span class="token punctuation">.</span>rear<span class="token punctuation">)</span> <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    QueuePtr p <span class="token operator">=</span> Q<span class="token punctuation">.</span>front<span class="token operator">-></span>next<span class="token punctuation">;</span>    e <span class="token operator">=</span> p<span class="token operator">-></span>data<span class="token punctuation">;</span>    Q<span class="token punctuation">.</span>front <span class="token operator">-></span> next <span class="token operator">=</span> p <span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Q<span class="token punctuation">.</span>rear <span class="token operator">==</span> p<span class="token punctuation">)</span> <span class="token comment">//如果原队列只有一个结点的时候需要改变rear指针！</span>        Q<span class="token punctuation">.</span>rear <span class="token operator">=</span> Q<span class="token punctuation">.</span>front<span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="循环队列">循环队列</h3><p>解决<em>假溢出</em>，形成头尾相接的顺序存储结构。问题在于，无论队空还是队满都会出现rear ==front的情况。为了解决这个问题，可以保留一个元素空间，即(rear+1)%MAXQSIZE==front的时候就判队满。</p><ul><li>定义</li></ul><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAXQSIZE</span> <span class="token expression"><span class="token number">100</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    QElemType <span class="token operator">*</span>base<span class="token punctuation">;</span>    <span class="token keyword">int</span> front<span class="token punctuation">;</span>    <span class="token keyword">int</span> rear<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>SqQueue<span class="token punctuation">,</span> Q<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><ul><li>构造空队列</li></ul><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c">Status <span class="token function">InitQueue</span> <span class="token punctuation">(</span>SqQueue <span class="token operator">&amp;</span>Q<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Q<span class="token punctuation">.</span>base <span class="token operator">=</span> <span class="token punctuation">(</span>QElemType<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span>MAXQSIZE<span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>QElemType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>Q<span class="token punctuation">.</span>base<span class="token punctuation">)</span> <span class="token function">exit</span><span class="token punctuation">(</span>OVERFLOW<span class="token punctuation">)</span><span class="token punctuation">;</span>    Q<span class="token punctuation">.</span>front <span class="token operator">=</span> Q<span class="token punctuation">.</span>rear<span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><ul><li>求队列长度</li></ul><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">QueueLength</span><span class="token punctuation">(</span>SqQueue Q<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>Q<span class="token punctuation">.</span>rear <span class="token operator">-</span> Q<span class="token punctuation">.</span>front <span class="token operator">+</span> MAXQSIZE<span class="token punctuation">)</span> <span class="token operator">%</span> MAXQSIZE<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div><ul><li>插入队尾元素</li></ul><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c">Status <span class="token function">EnQueue</span> <span class="token punctuation">(</span>SqQueue <span class="token operator">&amp;</span>Q<span class="token punctuation">,</span> QElemType e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Q<span class="token punctuation">.</span>rear<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>MAXQSIZE <span class="token operator">==</span> Q<span class="token punctuation">.</span>front<span class="token punctuation">)</span> <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span><span class="token comment">//队列满</span>    Q<span class="token punctuation">.</span>base<span class="token punctuation">[</span>Q<span class="token punctuation">.</span>rear<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>    Q<span class="token punctuation">.</span>rear <span class="token operator">=</span> <span class="token punctuation">(</span>Q<span class="token punctuation">.</span>rear<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> MAXQSIZE<span class="token punctuation">;</span><span class="token comment">//尾指针循环后移</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><ul><li>删除队头元素</li></ul><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c">Status <span class="token function">DeQueue</span> <span class="token punctuation">(</span>SqQueue <span class="token operator">&amp;</span>Q<span class="token punctuation">,</span> QElemType e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Q<span class="token punctuation">.</span>front <span class="token operator">==</span> Q<span class="token punctuation">.</span>rear<span class="token punctuation">)</span> <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    e <span class="token operator">=</span> Q<span class="token punctuation">.</span>base<span class="token punctuation">[</span>Q<span class="token punctuation">.</span>front<span class="token punctuation">]</span><span class="token punctuation">;</span>    Q<span class="token punctuation">.</span>front <span class="token operator">=</span> <span class="token punctuation">(</span>Q<span class="token punctuation">.</span>front<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> MAXQSIZE<span class="token punctuation">;</span><span class="token comment">//头指针循环后移</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="应用举例待补充-1">应用举例（待补充）</h3><ul><li>回文判断</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>线性表学习笔记</title>
    <link href="/2022/03/27/23-00-00/"/>
    <url>/2022/03/27/23-00-00/</url>
    
    <content type="html"><![CDATA[<h1 id="线性表">线性表</h1><ul><li>数据对象： <span class="math inline">\(D\)</span> = {<spanclass="math inline">\(a_i|a_i\in ElemSet,i=1,2\cdots ,n,n\ge0\)</span>}</li><li>数据关系： <span class="math inline">\(R_1\)</span>={<spanclass="math inline">\(&lt;a_i,a_{i-1}&gt;\)</span>|<spanclass="math inline">\(a_i,a_{i-1}\in D,i=1,2,\cdots n\)</span>}</li><li>基本操作：<ul><li>InitLise(&amp;L)</li><li>ListLenth(L)</li><li>GetElem(L,i,&amp;e)</li><li>PriorElem(L,ce,&amp;pre_e)</li><li>ListInsert(&amp;L,i,e)</li><li>ListDelete(&amp;L,i,&amp;e)</li><li>LocateElem(L,e,compare())</li></ul></li></ul><h2 id="线性表的顺序存储结构">线性表的顺序存储结构</h2><p>顺序分配：将数据元素依次存放到计算机存储器中一组地址连续的单元中。</p><ul><li>静态一维数组的定义</li></ul><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">maxlen</span> <span class="token expression"><span class="token number">100</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    ElemType elem<span class="token punctuation">[</span>maxlen<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> length<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>SqList<span class="token punctuation">;</span>SqList La<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><ul><li>动态一维数组的定义</li></ul><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LIST_INIT_SIZE</span> <span class="token expression"><span class="token number">100</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LISTINCREMENT</span> <span class="token expression"><span class="token number">10</span></span></span>type <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    ElemType <span class="token operator">*</span>elem<span class="token punctuation">;</span><span class="token comment">//存储空间基地址</span>    <span class="token keyword">int</span> length<span class="token punctuation">;</span>    <span class="token comment">//存储表长</span>    <span class="token keyword">int</span> listsize<span class="token punctuation">;</span>  <span class="token comment">//当前分配的存储容量，以sizeof(ElemType)为单位</span><span class="token punctuation">&#125;</span>SqList<span class="token punctuation">;</span>SqList Lb<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><ul><li>初始化 时间复杂度<span class="math inline">\(O(1)\)</span>空间复杂度<span class="math inline">\(O(1)\)</span></li></ul><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c">Status <span class="token function">InitList_Sq</span><span class="token punctuation">(</span>SqList <span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    L<span class="token punctuation">.</span>elem <span class="token operator">=</span> <span class="token punctuation">(</span>ElemType<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>LIST_INIT_SIZE<span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>ElemType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//利用malloc函数分配L的存储空间 返回首地址给L.elem</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">)</span> <span class="token function">exit</span><span class="token punctuation">(</span>OVERFLOW<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//L.elem为NULL 存储分配失败</span>    L<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    L<span class="token punctuation">.</span>listsize <span class="token operator">=</span> LIST_INIT_SIZE<span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><ul><li>销毁线性表</li></ul><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c">status <span class="token function">DestroyList</span><span class="token punctuation">(</span>SqList<span class="token operator">&amp;</span> L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">)</span> <span class="token keyword">return</span> INFEASIBLE<span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//销毁顺序表</span>    L<span class="token punctuation">.</span>elem<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>    L<span class="token punctuation">.</span>length<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    L<span class="token punctuation">.</span>listsize<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><ul><li>插入算法（静态分配）这里是是用指针指向线性表操作，也可以使用引用参数&amp;L来表示线性表，用L.elem操作。</li></ul><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">Insert</span><span class="token punctuation">(</span>SqList <span class="token operator">*</span>L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>ElemType e<span class="token punctuation">)</span><span class="token comment">//在第i个元素前插入e</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">1</span> <span class="token operator">||</span> i<span class="token operator">></span>L<span class="token operator">-></span>length<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token operator">-></span>length<span class="token operator">>=</span>maxlen<span class="token punctuation">)</span> <span class="token keyword">return</span> OVERFLOW<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> L<span class="token operator">-></span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">>=</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>        L<span class="token operator">-></span>elem<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token operator">-></span>elem<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//向后移动元素</span>    L<span class="token operator">-></span>elem<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>    L<span class="token operator">-></span>length<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><ul><li>插入算法（动态分配） 移动元素个数的平均值是<spanclass="math inline">\(\frac{n}{2}\)</span></li></ul><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">ListInsert_Sq</span><span class="token punctuation">(</span>SqList <span class="token operator">&amp;</span>L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>ElemType e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">1</span> <span class="token operator">|</span> i<span class="token operator">></span>L<span class="token punctuation">.</span>length<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token operator">-></span>length <span class="token operator">>=</span> L<span class="token punctuation">.</span>listsize<span class="token punctuation">)</span><span class="token comment">//动态分配 可以进行扩容</span>    <span class="token punctuation">&#123;</span>        ElemType <span class="token operator">*</span>newbase<span class="token punctuation">;</span>        newbase <span class="token operator">=</span> <span class="token punctuation">(</span>ElemType<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">realloc</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">,</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>listsize<span class="token operator">+</span>LISTINCREMENT<span class="token punctuation">)</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>ElemType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//重新分配空间使用realloc函数，将L.elem原空间数据全部复制到新分配的存储中,注意是ElemType类型不是SqList类型</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>newbase<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> OVERFLOW<span class="token punctuation">;</span>        L<span class="token punctuation">.</span>elem <span class="token operator">=</span> newbase<span class="token punctuation">;</span>        L<span class="token punctuation">.</span>listsize <span class="token operator">+=</span> LISTINCERMENT<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>L<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">>=</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>        L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>    L<span class="token punctuation">.</span>length<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><ul><li>删除操作 移动元素个数平均值，时间复杂度<spanclass="math inline">\(O(n)\)</span></li></ul><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c">Status <span class="token function">LitDelete_Sq</span><span class="token punctuation">(</span>SqList <span class="token operator">&amp;</span>L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>ElemType <span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">1</span> <span class="token operator">|</span> i<span class="token operator">></span>L<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>  p <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//被删除元素的位置p</span>  e <span class="token operator">=</span> <span class="token operator">*</span>p<span class="token punctuation">;</span> <span class="token comment">//被删除元素的值赋给e</span>  q <span class="token operator">=</span> L<span class="token punctuation">.</span>elem <span class="token operator">+</span> L<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">//表尾元素的位置</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token operator">++</span>p<span class="token punctuation">;</span> p<span class="token operator">&lt;=</span>q<span class="token punctuation">;</span> p<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>  <span class="token comment">//被删除元素后的元素左移</span>  <span class="token operator">--</span>L<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="问题解决">问题解决</h3><ul><li>求线性表的最大连续子数组和一道动态规划的题目，可以用dp[i]存储以第i个元素结尾的最大连续子数组和.dp[i] = max(dp[i-1],0) + L.elem[i]).</li></ul><h2 id="线性表的链式存储结构">线性表的链式存储结构</h2><p>通过<strong>指针</strong>实现，结点在存储器中的位置是<strong>随意</strong>的，逻辑上相邻的数据元素在物理上不一定相邻。</p><h3 id="单链表">单链表</h3><p>分为<strong>带表头结点</strong>的单链表和<strong>不带表头节点</strong>的单链表。头指针指向链表第一个节点；头节点是在链表的首元结点之前附设的一个节点，数据域内只放表长和空表标志等信息，不计入表长；首元节点是链表中储存第一个数据<spanclass="math inline">\(a_1\)</span>的节点。</p><ul><li>单链表的定义也可以单纯使用结构类型定义，大同小异，只是指针变量的说明稍有变化。</li></ul><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Lnode</span><span class="token punctuation">&#123;</span>  ElemType data<span class="token punctuation">;</span>  <span class="token keyword">struct</span> <span class="token class-name">Lnode</span> <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token comment">//指针类型的next</span><span class="token punctuation">&#125;</span>Lnode<span class="token punctuation">,</span> <span class="token operator">*</span>Linklist<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>指针变量head,p,q的说明:<code>Linklist head, p ,q;</code></p><ul><li>生成单链表（先进先出）</li></ul><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LENG</span> <span class="token expression"><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">node</span><span class="token punctuation">)</span></span><span class="token comment">//节点所占的字节数</span></span><span class="token keyword">struct</span> <span class="token class-name">Lnode</span> <span class="token operator">*</span><span class="token function">create1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">struct</span> <span class="token class-name">Lnode</span> <span class="token operator">*</span>head<span class="token punctuation">,</span> <span class="token operator">*</span>tail<span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>  <span class="token keyword">int</span> e<span class="token punctuation">;</span>  head <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Lnode</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>LENG<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//生成表头节点</span>  tail <span class="token operator">=</span> head<span class="token punctuation">;</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Lnode</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>LENG<span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token operator">-></span>data <span class="token operator">=</span> e<span class="token punctuation">;</span>    tail<span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token punctuation">;</span><span class="token comment">//先进先出</span>    tail <span class="token operator">=</span> p<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  tail<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment">//表尾next置为空指针</span>  <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><ul><li>生成单链表（后进先出） 基本同先进先出相同。</li></ul><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">Lnode</span> <span class="token operator">*</span><span class="token function">create2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">struct</span> <span class="token class-name">Lnode</span> <span class="token operator">*</span>head<span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>  <span class="token keyword">int</span> e<span class="token punctuation">;</span>  head <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Lnode</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>LENG<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//生成表头节点</span>  head<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment">//置为空表</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Lnode</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>LENG<span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token operator">-></span>data <span class="token operator">=</span> e<span class="token punctuation">;</span>    p<span class="token operator">-></span>next <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span><span class="token comment">//新节点指针指向首元素</span>    head<span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token punctuation">;</span><span class="token comment">//新节点作为首元素</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><ul><li><p>单链表的修改和存取</p></li><li><p>单链表的节点插入</p></li><li><p>单链表的节点删除</p></li><li><p>两个有序单链表的归并</p></li></ul><h3 id="静态链表">静态链表</h3><h3 id="循环链表">循环链表</h3><h3 id="双向链表">双向链表</h3><ul><li>双向链表的定义</li></ul><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">DuLNode</span><span class="token punctuation">&#123;</span>   ElemType data<span class="token punctuation">;</span>  <span class="token keyword">struct</span> <span class="token class-name">DuLNode</span> <span class="token operator">*</span>prior<span class="token punctuation">;</span><span class="token comment">//前驱指针</span>  <span class="token keyword">struct</span> <span class="token class-name">DuLNode</span> <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token comment">//后继指针</span><span class="token punctuation">&#125;</span>DuLNode<span class="token punctuation">,</span> <span class="token operator">*</span>DuLinkList<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="经典问题">经典问题</h2>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的第一次尝试</title>
    <link href="/2022/03/27/12-18-04/"/>
    <url>/2022/03/27/12-18-04/</url>
    
    <content type="html"><![CDATA[<h1 id="hello-world">hello world</h1><h2 id="hello-world-1">hello world</h2><h3 id="hello-world-2">hello world</h3><p>hello world <strong>hello world</strong> <em>hello world</em><del>hello world</del> ==hello world==</p><ul><li>first<ul><li>1.1<ul><li>1.2</li></ul></li></ul></li><li>second</li></ul><ol type="1"><li>好神奇<ol type="1"><li>太神奇了</li><li>我是说<em>真的</em>很<strong>神奇</strong></li></ol></li></ol><blockquote><p>鲁迅曾说</p></blockquote><p><code>printf("hello world")</code>这样可以继续在一行内打字</p><div class="code-wrapper"><pre class="line-numbers language-c&#123;.line-numbers&#125;<!--这个可以显示行数-->" data-language="c&#123;.line-numbers&#125;<!--这个可以显示行数-->"><code class="language-c&#123;.line-numbers&#125;<!--这个可以显示行数-->">printf(&quot;hello world&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p><a href="https://theme-next.js.org/docs/">传送！</a> <imgsrc="/img/posts/avatar.jpg" alt="一张图" /></p><p>如果在这里我写了一段话 如果我不换行 那么我要换一行</p><hr /><p>就是这样！</p><figure><img src="/img/posts/2022-03-27-12-43-38.jpg"alt="这是我粘贴来的图片！" /><figcaption aria-hidden="true">这是我粘贴来的图片！</figcaption></figure><p>下面是一些数学公式的尝试 <spanclass="math inline">\(x^2+y^2=1\)</span> 公式块:</p><p><span class="math display">\[\begin{cases}x=\rho\cos\theta \\y=\rho\sin\theta \\\end{cases}\]</span></p><p><span class="math display">\[x^3+y^3=\theta\]</span>两个好像可以居中<span class="math display">\[\mathbb{R}\]</span> <spanclass="math display">\[\frac{1}{2}\]</span> <spanclass="math display">\[\sqrt{1}\]</span></p>]]></content>
    
    
    
    <tags>
      
      <tag>markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
